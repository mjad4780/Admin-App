{
    "sourceFile": "lib/Future/Drawer/OrderScreen/logic/cubit/orders_cubit.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1723887279251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723888264190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,33 +74,33 @@\n       selectedOrderStatus = 'Cancelled';\n     }\n   }\n \n-  String? status;\n+  String? updateStatus;\n \n-  updatestatus(String value) {\n+  updateStatus(String value) {\n     if (value == 'pending') {\n-      status = 'pending';\n+      updateStatus = 'pending';\n     } else if (value == 'been approved') {\n-      status = 'been approved';\n+      updateStatus = 'been approved';\n     } else if (value == 'prepare') {\n-      status = 'prepare';\n+      updateStatus = 'prepare';\n     } else if (value == 'shipped') {\n-      status = 'shipped';\n+      updateStatus = 'shipped';\n     } else if (value == 'done') {\n-      status = 'done';\n+      updateStatus = 'done';\n     } else {}\n   }\n \n   updateOrders(int orderid, int userid, int type) {\n-    if (status == 'pending') {\n-    } else if (status == 'been approved') {\n+    if (updateStatus == 'pending') {\n+    } else if (updateStatus == 'been approved') {\n       approve(orderid, userid);\n-    } else if (status == 'prepare') {\n+    } else if (updateStatus == 'prepare') {\n       prepare(orderid, userid, type);\n-    } else if (status == 'shipped') {\n+    } else if (updateStatus == 'shipped') {\n       shipped(orderid, userid);\n-    } else if (status == 'done') {\n+    } else if (updateStatus == 'done') {\n       done(orderid, userid);\n     } else {}\n   }\n \n"
                },
                {
                    "date": 1723888664540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+import 'dart:developer';\n+\n import 'package:bloc/bloc.dart';\n import 'package:flutter/material.dart';\n \n import '../../../../../models/response_orders/datum.dart';\n@@ -11,9 +13,9 @@\n       : super(const OrdersState.initial());\n   final OrdersRepo _ordersRepo;\n   final ViewOrdersRepo _viewOrdersRepo;\n   List<Datum> itemorders = [];\n-\n+  AutovalidateMode autovalidateMode = AutovalidateMode.disabled;\n   final orderFormKey = GlobalKey<FormState>();\n   TextEditingController trackingUrlCtrl = TextEditingController();\n   String selectedOrderStatus = 'pending';\n   List<Datum> orderData = [\n@@ -27,11 +29,9 @@\n       ordersStatus: 0,\n       ordersCoupon: 66,\n     )\n   ];\n-  // List<CartModel> cartdata = [\n-  //   CartModel(itemsName: 'hp', itemsPrice: 22, itemsCount: 2)\n-  // ];\n+\n   List<String> item = [\n     'All order',\n     'pending',\n     'been approved',\n@@ -76,9 +76,9 @@\n   }\n \n   String? updateStatus;\n \n-  updateStatus(String value) {\n+  updatestatus(String value) {\n     if (value == 'pending') {\n       updateStatus = 'pending';\n     } else if (value == 'been approved') {\n       updateStatus = 'been approved';\n@@ -100,9 +100,11 @@\n     } else if (updateStatus == 'shipped') {\n       shipped(orderid, userid);\n     } else if (updateStatus == 'done') {\n       done(orderid, userid);\n-    } else {}\n+    } else {\n+      log('message');\n+    }\n   }\n \n   ///:approve\n   approve(int orderid, int userid) async {\n"
                },
                {
                    "date": 1723888836010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,33 +74,33 @@\n       selectedOrderStatus = 'Cancelled';\n     }\n   }\n \n-  String? updateStatus;\n+  // String? updateStatus;\n \n   updatestatus(String value) {\n     if (value == 'pending') {\n-      updateStatus = 'pending';\n+      selectedOrderStatus = 'pending';\n     } else if (value == 'been approved') {\n-      updateStatus = 'been approved';\n+      selectedOrderStatus = 'been approved';\n     } else if (value == 'prepare') {\n-      updateStatus = 'prepare';\n+      selectedOrderStatus = 'prepare';\n     } else if (value == 'shipped') {\n-      updateStatus = 'shipped';\n+      selectedOrderStatus = 'shipped';\n     } else if (value == 'done') {\n-      updateStatus = 'done';\n+      selectedOrderStatus = 'done';\n     } else {}\n   }\n \n   updateOrders(int orderid, int userid, int type) {\n-    if (updateStatus == 'pending') {\n-    } else if (updateStatus == 'been approved') {\n+    if (selectedOrderStatus == 'pending') {\n+    } else if (selectedOrderStatus == 'been approved') {\n       approve(orderid, userid);\n-    } else if (updateStatus == 'prepare') {\n+    } else if (selectedOrderStatus == 'prepare') {\n       prepare(orderid, userid, type);\n-    } else if (updateStatus == 'shipped') {\n+    } else if (selectedOrderStatus == 'shipped') {\n       shipped(orderid, userid);\n-    } else if (updateStatus == 'done') {\n+    } else if (selectedOrderStatus == 'done') {\n       done(orderid, userid);\n     } else {\n       log('message');\n     }\n"
                },
                {
                    "date": 1723889584562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,22 +39,33 @@\n     'shipped',\n     'done',\n     'Cancelled'\n   ];\n-\n+  String? dataOrder;\n   filterOrders(String value) {\n     if (value == 'All order') {\n       viewAllOrders();\n+      dataOrder = value;\n     } else if (value == 'pending') {\n       viewpending();\n+            dataOrder = value;\n+\n     } else if (value == 'been approved') {\n       viewapprove();\n+            dataOrder = value;\n+\n     } else if (value == 'prepare') {\n       viewprepare();\n+            dataOrder = value;\n+\n     } else if (value == 'shipped') {\n       viewshipped();\n+            dataOrder = value;\n+\n     } else if (value == 'done') {\n       viewdone();\n+            dataOrder = value;\n+\n     } else {\n       viewCancel();\n     }\n   }\n"
                },
                {
                    "date": 1723889730216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n     'Cancelled'\n   ];\n   String? dataOrder;\n   filterOrders(String value) {\n+    dataOrder = 'All order';\n     if (value == 'All order') {\n       viewAllOrders();\n       dataOrder = value;\n     } else if (value == 'pending') {\n"
                }
            ],
            "date": 1723887279251,
            "name": "Commit-0",
            "content": "import 'package:bloc/bloc.dart';\nimport 'package:flutter/material.dart';\n\nimport '../../../../../models/response_orders/datum.dart';\nimport '../../data/repo_orders.dart';\nimport '../../data/repo_view_order.dart';\nimport 'orders_state.dart';\n\nclass OrdersCubit extends Cubit<OrdersState> {\n  OrdersCubit(this._ordersRepo, this._viewOrdersRepo)\n      : super(const OrdersState.initial());\n  final OrdersRepo _ordersRepo;\n  final ViewOrdersRepo _viewOrdersRepo;\n  List<Datum> itemorders = [];\n\n  final orderFormKey = GlobalKey<FormState>();\n  TextEditingController trackingUrlCtrl = TextEditingController();\n  String selectedOrderStatus = 'pending';\n  List<Datum> orderData = [\n    const Datum(\n      ordersUserid: 100,\n      ordersDatetime: '2000-4-22',\n      ordersId: 2,\n      ordersPaymentmets: 3,\n      orderToatalprice: 555,\n      ordersType: 44,\n      ordersStatus: 0,\n      ordersCoupon: 66,\n    )\n  ];\n  // List<CartModel> cartdata = [\n  //   CartModel(itemsName: 'hp', itemsPrice: 22, itemsCount: 2)\n  // ];\n  List<String> item = [\n    'All order',\n    'pending',\n    'been approved',\n    'prepare',\n    'shipped',\n    'done',\n    'Cancelled'\n  ];\n\n  filterOrders(String value) {\n        if (value == 'All order') {\n      viewAllOrders();\n   } else if (value == 'pending') {\n      viewpending();\n    } else if (value == 'been approved') {\n      viewapprove();\n    } else if (value == 'prepare') {\n      viewprepare();\n    } else if (value == 'shipped') {\n      viewshipped();\n    } else if (value == 'done') {\n      viewdone();\n    } else {\n      viewCancel();\n    }\n  }\n\n  orderStatus(int status) {\n    if (status == 0) {\n      selectedOrderStatus = 'pending';\n    } else if (status == 1) {\n      selectedOrderStatus = 'been approved';\n    } else if (status == 2) {\n      selectedOrderStatus = 'prepare';\n    } else if (status == 3) {\n      selectedOrderStatus = 'shipped';\n    } else if (status == 4) {\n      selectedOrderStatus = 'done';\n    } else {\n      selectedOrderStatus = 'Cancelled';\n    }\n  }\n\n  String? status;\n\n  updatestatus(String value) {\n    if (value == 'pending') {\n      status = 'pending';\n    } else if (value == 'been approved') {\n      status = 'been approved';\n    } else if (value == 'prepare') {\n      status = 'prepare';\n    } else if (value == 'shipped') {\n      status = 'shipped';\n    } else if (value == 'done') {\n      status = 'done';\n    } else {}\n  }\n\n  updateOrders(int orderid, int userid, int type) {\n    if (status == 'pending') {\n    } else if (status == 'been approved') {\n      approve(orderid, userid);\n    } else if (status == 'prepare') {\n      prepare(orderid, userid, type);\n    } else if (status == 'shipped') {\n      shipped(orderid, userid);\n    } else if (status == 'done') {\n      done(orderid, userid);\n    } else {}\n  }\n\n  ///:approve\n  approve(int orderid, int userid) async {\n    emit(const OrdersState.loadingapprove());\n    final response = await _ordersRepo.approve(orderid, userid);\n    response.when(success: (data) {\n      emit(const OrdersState.successapprove());\n    }, failure: (error) {\n      emit(OrdersState.erorrapprove(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:prepare\n  prepare(int orderid, int userid, int type) async {\n    emit(const OrdersState.loadingprepare());\n    final response = await _ordersRepo.prepare(type, orderid, userid);\n    response.when(success: (data) {\n      emit(const OrdersState.successprepare());\n    }, failure: (error) {\n      emit(OrdersState.erorrprepare(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:done\n  done(int orderid, int userid) async {\n    emit(const OrdersState.loadingdone());\n    final response = await _ordersRepo.done(orderid, userid);\n    response.when(success: (data) {\n      emit(const OrdersState.successdone());\n    }, failure: (error) {\n      emit(OrdersState.erorrdone(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:shipped\n  shipped(int orderid, int userid) async {\n    emit(const OrdersState.loadingshipped());\n    final response = await _ordersRepo.shipped(orderid, userid);\n    response.when(success: (data) {\n      emit(const OrdersState.successshipped());\n    }, failure: (error) {\n      emit(OrdersState.erorrshipped(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:viewdetails\n  viewdetails(int orderid, int userid) async {\n    emit(const OrdersState.loadingviewdetails());\n    final response = await _ordersRepo.viewdetails(\n      orderid,\n    );\n    response.when(success: (data) {\n      emit(OrdersState.successviewdetails(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrviewdetails(erorr: error.messege ?? ''));\n    });\n  }\n\n   ///:viewAllOrders\n  viewAllOrders() async {\n    itemorders.clear();\n    emit(const OrdersState.loadingviewAllOrders());\n    final response = await _viewOrdersRepo.viewAllOrders();\n    response.when(success: (data) {\n      itemorders = data.data ?? [];\n      emit(OrdersState.successviewAllOrders(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrviewAllOrders(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:viewapprove\n  viewapprove() async {\n    itemorders.clear();\n    emit(const OrdersState.loadingviewapprove());\n    final response = await _viewOrdersRepo.viewapprove();\n    response.when(success: (data) {\n      itemorders = data.data ?? [];\n      emit(OrdersState.successviewapprove(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrviewapprove(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:viewCancel\n  viewCancel() async {\n    itemorders.clear();\n\n    emit(const OrdersState.loadingviewCancel());\n    final response = await _viewOrdersRepo.viewCancel();\n    response.when(success: (data) {\n      itemorders = data.data ?? [];\n\n      emit(OrdersState.successviewCancel(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrviewCancel(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:viewdone\n  viewdone() async {\n    itemorders.clear();\n\n    emit(const OrdersState.loadingviewdone());\n    final response = await _viewOrdersRepo.viewdone();\n    response.when(success: (data) {\n      itemorders = data.data ?? [];\n\n      emit(OrdersState.successviewdone(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrdone(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:viewpending\n  viewpending() async {\n    itemorders.clear();\n\n    emit(const OrdersState.loadingviewpending());\n    final response = await _viewOrdersRepo.viewpending();\n    response.when(success: (data) {\n      itemorders = data.data ?? [];\n\n      emit(OrdersState.successviewpending(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrviewdone(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:viewprepare\n  viewprepare() async {\n    itemorders.clear();\n\n    emit(const OrdersState.loadingviewprepare());\n    final response = await _viewOrdersRepo.viewprepare();\n    response.when(success: (data) {\n      itemorders = data.data ?? [];\n\n      emit(OrdersState.successviewprepare(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrviewprepare(erorr: error.messege ?? ''));\n    });\n  }\n\n  ///:viewshipped\n  viewshipped() async {\n    itemorders.clear();\n    emit(const OrdersState.loadingviewshipped());\n    final response = await _viewOrdersRepo.viewshipped();\n    response.when(success: (data) {\n      itemorders = data.data ?? [];\n\n      emit(OrdersState.successviewshipped(data.data ?? []));\n    }, failure: (error) {\n      emit(OrdersState.erorrviewshipped(erorr: error.messege ?? ''));\n    });\n  }\n}\n"
        }
    ]
}